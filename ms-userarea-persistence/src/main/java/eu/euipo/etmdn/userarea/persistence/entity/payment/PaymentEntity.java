/*
 * $Id:: Payment.java 2021/05/11 11:02 achristo
 *
 *        . * .
 *      * RRRR  *   Copyright (c) 2012-2021 EUIPO: European Intelectual
 *     .  RR  R  .  Property Organization (trademarks and designs).
 *     *  RRR    *
 *      . RR RR .   ALL RIGHTS RESERVED
 *       *. _ .*
 *
 *  The use and distribution of this software is under the restrictions exposed in 'license.txt'
 */

package eu.euipo.etmdn.userarea.persistence.entity.payment;

import eu.euipo.etmdn.userarea.domain.payment.PaymentStatus;
import eu.euipo.etmdn.userarea.domain.payment.PaymentType;
import eu.euipo.etmdn.userarea.persistence.entity.listener.AuditLogPaymentListener;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityListeners;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;
import java.util.StringJoiner;

@Getter
@Setter
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Entity
@EntityListeners(AuditLogPaymentListener.class)
@Table(name = "PAYMENT")
public class PaymentEntity {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "PaymentId")
    private Long id;

    @Column(name = "Owner")
    private String owner;

    // free text of user input up to 200 chars
    @Column(name = "Reference")
    private String paymentReference;

    // Unique identifier that identifies the payment platform transaction
    @Column(name = "TransactionId")
    private String transactionId;

    // Unique identifier generated by the payment platform to signify the successful payment
    @Column(name = "ConfirmationId")
    private String confirmationId;

    @Column(name = "SubmissionDateTime")
    private LocalDateTime submissionDateTime;

    @Column(name = "Status")
    @Enumerated(EnumType.STRING)
    private PaymentStatus status;

    @Column(name = "Type")
    @Enumerated(EnumType.STRING)
    private PaymentType type;

    @Column(name = "ApplicationIds")
    private String applicationIds;

    @Column(name = "ApplicationNumbers")
    private String applicationNumbers;

    @Column(name = "Total")
    private BigDecimal total;

    @Column(name = "PaidBy")
    private String paidBy;

    @Column(name = "ErrorMessage")
    private String errorMessage;

    @CreationTimestamp
    @Column(name = "CreatedAt")
    private LocalDateTime createdAt;

    @UpdateTimestamp
    @Column(name = "UpdatedAt")
    private LocalDateTime updatedAt;

    @Column(name = "CartId")
    private Long cartId;

    @OneToMany(fetch = FetchType.LAZY)
    @JoinColumn(name = "PaymentId")
    private List<PaymentApplicationEntity> paymentApplications;

    @Override
    public String toString ()
    {
        return new StringJoiner(
                " | " ,
                PaymentEntity.class.getSimpleName() + "[ " ,
                " ]"
        )
                .add("id=" + id)
                .add("reference=" + paymentReference)
                .add("transactionId=" + transactionId)
                .add("confirmationId=" + confirmationId)
                .add("status=" + status )
                .add("type=" + type)
                .add("cartId=" + cartId)
                .add("applicationNumbers=" + applicationNumbers)
                .add("total" + total)
                .add("paidBy=" + paidBy)
                .add("errorMessage=" + errorMessage)
                .toString();
    }
}
